1. ドキュメント管理

版数履歴、作成者、レビューア、承認日
ブランチ運用やタグ管理時に AI エージェントが参照できるよう、必ず記載。



2. 目的

読書定規（Reading Ruler、以下「RR」）は、行を見失いやすい利用者の読解負荷を軽減し、ディスレクシア（読字障害）支援を目的とする。


3. 適用範囲

MVP は Google Chrome 向け Manifest V3 拡張に限定。将来的な Edge・Firefox への移植は「将来拡張」の節で言及する。


4. 参考資料

IEEE 830 ソフトウェア要求仕様書テンプレート
WCAG 2.2 日本語訳（アクセシビリティ指針）
**Chrome 拡張 Manifest V3 開発ガイド（日本語）**


5. 用語・略語

略語	定義

RR	Reading Ruler（読書定規）
M-V3	Chrome Manifest Version 3
WCAG	Web Content Accessibility Guidelines


6. ステークホルダー

プロダクトオーナー

QA エンジニア

アクセシビリティ担当

エンドユーザー（読字障害ユーザー、集中して読みたい一般ユーザー）


7. ユーザーペルソナ & ハイレベルユースケース

7.1 主ペルソナ ―「ユキ」（読字障害のある読者）

スクロールに追従するハイライトバーを好み、色・不透明度を変更したい。


7.2 副ペルソナ ―「ハルナ」（開発者・記事検証者）

キーボードショートカットで素早く ON/OFF したい。


8. 機能要件（FR）

ID	要件

FR-01	定規の表示切替：ツールバー、コンテキストメニュー、ホットキーでトグル可能。
FR-02	ウィンドウ調整：高さ（px）、色、透過率、枠線を変更。
FR-03	スクロール追従：縦スクロールに同期し、横位置は固定。
FR-04	サイト別プロファイル：chrome.storage.sync でドメインごとに設定保持。
FR-05	フォーカスモード：定規外領域の輝度を下げ、集中度を高める。
FR-06	除外要素検知：固定ヘッダー・フッターを自動検出し重なりを防止。
FR-07	i18n：初期リリースで日英 UI を含む。


9. 非機能要件（NFR）

カテゴリ	目標値

パフォーマンス	DOMContentLoaded 後 2 ms 以内に content-script 挿入。フレーム毎描画 16 ms 以内。
アクセシビリティ	WCAG 2.2 AA 準拠を目標とする。
プライバシー & セキュリティ	activeTab とユーザー指定サイトの host_permissions のみに限定。
信頼性	Alexa Top-100 ニュースサイトで 99.9 % の切替成功率。
保守性	ESLint & Prettier 警告ゼロ、1 関数 40 行以内。
移植性	Chrome 124 以降で動作、ブラウザ依存 API を最小化。


10. システム構成

10.1 コンポーネント

1. manifest.json ― 権限・アイコン・アクションを定義。


2. サービスワーカー ― トグル指令受信と設定保存。


3. content-script ― DOM にオーバーレイを挿入しイベントを監視。


4. オプションページ ― React + Vite でカラー Picker 等を提供。


5. ポップアップ UI ― ON/OFF スイッチと直近プリセット。



10.2 データフロー

1. ユーザー操作 → 背景スクリプトがメッセージ送信。


2. content-script が <div id="rr-overlay"> を（アン）マウント。


3. 設定を chrome.storage.sync に保存し、すべてのタブへ同期。



11. 権限マトリクス

API/権限	目的	セキュリティ影響

activeTab	現在のページへオーバーレイ挿入	低
storage	設定保存	なし


12. UI/UX 仕様

デフォルトは高さ 32 px、半透明ブルー。

キーボードショートカットは Chrome 拡張管理画面で変更可能。


13. アクセシビリティチェックリスト

1. prefers-reduced-motion を尊重。


2. すべての操作をキーボードのみで実行可能。


3. スクリーンリーダーのバーチャルカーソルを阻害しない。



14. エラーハンドリング & ログ

console.debug をデバッグフラグで制御。

リーダーモードや Shadow DOM ページでは自動的にフェイルセーフ。


15. テスト計画

単体テスト：ユーティリティ関数（サイズ計算、色変換）。

統合テスト：Playwright で主要サイトを読み込み、#rr-overlay 生成を検証。

パフォーマンステスト：Lighthouse カスタム監査で FPS を測定。


16. デプロイ & 配布

ビルド済み ZIP < 2 GB を Chrome デベロッパー ダッシュボードへ提出。

CI でバージョン自動更新とスクリーンショット生成を実施。


17. AI エージェントへの成果物要求

成果物	形式	受入基準

ソースコード	Git リポジトリ（MIT）	npm test 緑
ビルド物	/dist ZIP	Web-Store バリデーション通過
ドキュメント	README.md + JSDoc	カバレッジ 80 %
SRS 準拠表	Markdown	手動レビュー


17.1 実行制約例

1 タスクあたり 最大実行 30 分。

許可ツール: Node 20, Vite, ESLint, Playwright。

外部通信禁止（npm レジストリを除く）。

評価フック: npm run ci。


18. スケジュール & マイルストーン

フェーズ	期間	完了条件

設計	3 日	SRS 承認
実装	5 日	すべての FR 満足
テスト	2 日	重大バグ 0
ストア提出	1 日	審査待ち


19. リスク & 緩和策

Chrome API 廃止: chromium-dev を監視し、M-V3 固定。

性能劣化: Lighthouse 予算を CI に組み込み。

アクセシビリティ不足: 外部テスター招致。


20. 付録: manifest.json サンプル

{
  "manifest_version": 3,
  "name": "Reading-Ruler",
  "version": "0.1.0",
  "description": "長文読解の行位置を維持するための読書定規。",
  "icons": { "16": "icons/16.png", "48": "icons/48.png", "128": "icons/128.png" },
  "action": { "default_title": "Reading Ruler を切替" },
  "permissions": ["activeTab", "storage"],
  "background": { "service_worker": "bg.js" },
  "content_scripts": [{
    "matches": ["<all_urls>"],
    "js": ["content.js"]
  }]
}


---

まとめ

章立ては IEEE 830 を踏襲しつつ、Chrome Manifest V3 に特化した実装詳細を追加。

アクセシビリティは WCAG 2.2 AA を満たす指標を明記し、利用者の多様なニーズをカバー。

AI エージェントが自動ビルド・テスト・Lint まで実行できるよう、成果物と評価フックを具体化。


このテンプレートを基に具体値やワイヤーフレームを充填すれば、AI エージェントにとって実装可能なレベルの詳細仕様書が完成します。

